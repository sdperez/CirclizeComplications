install.packages("circlize")
library(circlize)
set.seed(12345)
rand_color = function() {
return(rgb(runif(1), runif(1), runif(1)))
}
layout(matrix(1:9, 3, 3))
for(i in 1:9) {
factors = 1:8
par(mar = c(0.5, 0.5, 0.5, 0.5))
circos.par(cell.padding = c(0, 0, 0, 0))
circos.initialize(factors, xlim = c(0, 1))
bg.col = sapply(1:8, function(x) rand_color()), bg.border = NA)
circos.initialize(factors, xlim = c(0, 1))
for(i in 1:9) {
factors = 1:8
par(mar = c(0.5, 0.5, 0.5, 0.5))
circos.par(cell.padding = c(0, 0, 0, 0))
circos.initialize(factors, xlim = c(0, 1))
circos.trackPlotRegion(ylim = c(0, 1), track.height = 0.05,
bg.col = sapply(1:8, function(x) rand_color()), bg.border = NA)
for(i in 1:20) {
se = sample(1:8, 2)
col = rand_color()
col = paste(col, "40", sep = "")
circos.link(se[1], runif(2), se[2], runif(2), col = col)
}
circos.clear()
}
plot(cars)
par(def.par)
par(mfrow=c(1,1))
plot(cars)
par(mar = c(1, 1, 1, 1))
plot(cars)
par(mar = c(2, 2, 1, 1))
plot(cars)
par(mar = c(3, 3, 2, 1))
plot(cars)
par(mar = c(5, 3, 2, 1))
plot(cars)
par(mar = c(5, 5, 2, 1))
plot(cars)
plot(cars)
plot(cars)
def.par <- par(no.readonly = TRUE) # save default, for resetting...
par(mar = c(5, 5, 2, 1))
plot(cars)
par(def.par)#reset to default
plot(cars)
library(circlize)
set.seed(12345)
rand_color = function() {
return(rgb(runif(1), runif(1), runif(1)))
}
factors = 1:8
circos.initialize(factors, xlim = c(0, 1))
circos.trackPlotRegion(ylim = c(0, 1), track.height = 0.05,
bg.col = sapply(1:8, function(x) rand_color()), bg.border = NA)
se = sample(1:8, 2)
col = rand_color()
col = paste(col, "40", sep = "")
col = rand_color()
col = paste(col, "40", sep = "")
circos.link(se[1], runif(2), se[2], runif(2), col = col)
circos.link(se[1], runif(2), se[2], runif(2), col = col)
col = rand_color()
col = paste(col, "40", sep = "")
circos.link(se[1], runif(2), se[2], runif(2), col = col)
col = rand_color()
col = paste(col, "40", sep = "")
circos.link(se[1], runif(2), se[2], runif(2), col = col)
se = sample(1:8, 2)
col = rand_color()
col = paste(col, "40", sep = "")
circos.link(se[1], runif(2), se[2], runif(2), col = col)
circos.trackPlotRegion(ylim = c(0, 2), track.height = 0.05,
bg.col = sapply(1:8, function(x) rand_color()), bg.border = NA)
circos.clear()
circos.initialize(factors, xlim = c(0, 1))
circos.trackPlotRegion(ylim = c(0, 2), track.height = 0.05,
bg.col = sapply(1:8, function(x) rand_color()), bg.border = NA)
circos.trackPlotRegion(ylim = c(1, 2), track.height = 0.05,
bg.col = sapply(1:8, function(x) rand_color()), bg.border = NA)
circos.initialize(factors, xlim = c(0, 2))
circos.trackPlotRegion(ylim = c(1, 2), track.height = 0.05,
bg.col = sapply(1:8, function(x) rand_color()), bg.border = NA)
circos.trackPlotRegion(ylim = c(0, 2), track.height = 0.05,
bg.col = sapply(1:8, function(x) rand_color()), bg.border = NA)
letters[1:8]
sample(letters[1:8],2)
sample(letters[1:8],10,replace=T)
set.seed(12345)
n = 1000
a = data.frame(factor = sample(letters[1:8], n, replace = TRUE),
x = rnorm(n), y = runif(n))
View(a)
runif(2)
runif(2)
runif(2)
runif(2)
n=data.frame(factor=rep(1:3,each=100),x = rnorm(100), y = runif(100)))
n=data.frame(factor=rep(1:3,each=100),x = rnorm(100), y = runif(100))
View(n)
par(mar = c(1, 1, 1, 1), lwd = 0.1, cex = 0.7)
circos.par("default.track.height" = 0.1)
circos.initialize(factors = a$factor, x = a$x)
circos.trackPlotRegion(factors = a$factor, y = a$y,
panel.fun = function(x, y) {
circos.axis()
})
circos.initialize(factors = a$factor, x = a$x)
circos.trackPlotRegion(factors = a$factor, y = a$y, bg.col=1:8)
runif(1)
rgb(1,1,1)
rgb(2,2,2)
rgb(.5,.5,.5)
circos.trackPlotRegion(ylim = c(0, 1), track.height = 2,
bg.col = sapply(1:8, function(x) rand_color()), bg.border = NA)
circos.initialize(factors, xlim = c(0, 1))
circos.trackPlotRegion(ylim = c(0, 1), track.height = 2,
bg.col = sapply(1:8, function(x) rand_color()), bg.border = NA)
circos.trackPlotRegion(ylim = c(0, 1), track.height = 1,
bg.col = sapply(1:8, function(x) rand_color()), bg.border = NA)
circos.trackPlotRegion(ylim = c(0, 1), track.height = .1,
bg.col = sapply(1:8, function(x) rand_color()), bg.border = NA)
circos.initialize(factors, xlim = c(0, 2))
circos.trackPlotRegion(ylim = c(0, 2), track.height = 0.05,
bg.col = sapply(1:8, function(x) rand_color()), bg.border = NA)
circos.initialize(factors, x = x,
sector.width =as.numeric(factors) )
circos.initialize(factors,
sector.width =as.numeric(factors) )
circos.initialize(factors, xlim = c(0, 1),
sector.width =as.numeric(factors) )
circos.trackPlotRegion(ylim = c(0, 1), track.height = .1,
bg.col = sapply(1:8, function(x) rand_color()), bg.border = NA)
library(foreign)
AllDat<-read.spss('C:/Users/sdperez.EMORYUNIVAD/Desktop/My Documents/NSQIP_PUF/acs_nsqip_puf12.sav',
to.data.frame=TRUE)
library(xlsx)
AllDat<-read.xlsx2('NSQIP2012.xls',1)
setwd('C:/Users/sdperez.EMORYUNIVAD/Documents/GitHub/CirclizeComplications')
library(xlsx)
AllDat<-read.xlsx2('NSQIP2012.xls',1)
setwd('C:/Users/sdperez.EMORYUNIVAD/Documents/GitHub/CirclizeComplications')
library(xlsx)
Comps<-read.xlsx2('Complications.xls',1,stringsAsFactors=FALSE)
#names(Comps)
#sum(as.numeric(Comps$COUNT))#total General Surgery patients in set
#Let's count the number of complications of each type
x<-list()
for (i in 1:21) {
x[[i]]<-min(by(as.numeric(Comps$COUNT),Comps[,i],FUN=sum))
}
Comp.Tab<-data.frame(Complication=names(Comps)[1:21],Count=unlist(x))
#sum(Comp.Tab$Count)#number
#the folling three complications had so few numbers they hard to see on the plot
##so we excluded them.
CompPlot<-Comp.Tab[-c(13,14,18),]
CompPlot$Complication<-factor(CompPlot$Complication)
CompPlot$labls<-c("Superficial SSI","Deep SSI","Organ Space SSI","Wound Dehis",
"Pneumonia", "Reintubation","Pulm. Embolism","Fail to Wean",
"Renal Insf.","Renal Fail","UTI","CVA","Card. Arrest","MI",
"Transfusion","DVT","Sepsis","Septic Shock")
```
###Frequency by Combination of Complications
The second dataset will describe what is the frequency of patients that have each of the two way combinations of complications. In other words, how many patients had a heart attach AND a superficial site infection? This dataset will be used to create the links between the segments of the outer circle.
Create file with information about links
```{r ,warning=FALSE, message=FALSE}
#Create a blank data frame for data
links1<-data.frame(Comp1=vector('character',441),Comp2=vector('character',441),Count=numeric(441),
stringsAsFactors=F)
#The 'Comps' data set includes all possible combination of complications.
#The following calculates for each *2-WAY COMBINATION* of complications the total occurrences
for (i in 1:21){
for (j in 1:21){
index<-Comps[,i]!='No Complication' & Comps[,j]!='No Complication'
Comps2<-Comps[index,]
n=21*(i-1)+j
links1$Count[n]<-sum(as.numeric(Comps2$COUNT))
links1$Comp1[n]<-names(Comps2)[i]
links1$Comp2[n]<-names(Comps2)[j]
}
}
#not all 2-way combinations are needed since they are repeated in the data.
#we need to delete the duplicates.
#list of only the combinations we want to use(delete unneeded rows)
comblist<-t(combn(as.character(CompPlot$Complication),2))
to.keep<-paste(links1$Comp1,links1$Comp2,sep='')%in% paste(comblist[,1],comblist[,2],sep='')
#sum(to.keep)#check there are only 153 combinations
links2<-links1[to.keep,]
links3<-merge(links2, Comp.Tab, by.x='Comp1',by.y='Complication')
links4<-merge(links3, Comp.Tab, by.x='Comp2',by.y='Complication')
names(links4)[4]<-'den1'
names(links4)[5]<-'den2'
#divide the complications by each of the denominators
##this is because the thickness of the link needs to be between 0 and 1.
links4$Comp1.perc<-links4$Count/links4$den1
links4$Comp2.perc<-links4$Count/links4$den2
op <- par(no.readonly = TRUE)
library(circlize)
#library(RColorBrewer)
#display.brewer.pal(21, 'Purples')
#display.brewer.pal(21, 'PuBu')
#col <- brewer.pal(9, 'PuBu')
#colp <- brewer.pal(9, 'Purples')
#col[3]<-"#3F007D"
#col[4]<-"#6A51A3"
#col2<-rep(col[3:9],3)
colfunc <- colorRampPalette(c("red","yellow","green","blue"))
#levels(CompPlot$Complication)
#cbind(CompPlot$Complication,CompPlot$Count)
ord<-order(CompPlot$Complication)
par(mar = c(4, 4, 4, 4))
circos.clear()
circos.par(cell.padding=c(0,0,0,0), gap.degree=.5)
#track.margin=c(.2,.2))
circos.initialize(CompPlot$Complication, xlim = c(0, 1),
sector.width =c(CompPlot$Count[ord]))
circos.trackPlotRegion(ylim = c(0, 1),
factors=CompPlot$Complication,
track.height = .08,
bg.col = colfunc(18),
bg.border = NA,
panel.fun=function(x,y){
i = get.cell.meta.data("sector.numeric.index")
name = get.cell.meta.data("sector.index")
xlim = get.cell.meta.data("xlim")
if (i %in% 8:13) dir="vertical_left"  else dir="vertical_right"
circos.text(x=.5, y=2.5,
labels=CompPlot$labls[ord][i],
direction=dir,
cex=.6)
}
)
###Plot Links
#Now create the links between the segments
for (k in 1:nrow(links4)) {
if (links4$Count.x[k]>340) {
start=runif(1)
end=runif(1)
circos.link(links4$Comp1[k],
c(start,start+links4$Comp1.perc[k]),
links4$Comp2[k],
c(end,end+links4$Comp2.perc[k]),
top.ratio=.48, top.ratio.low=.50,
col=paste(colfunc(153)[k],"80",sep=''))
}
}
circos.clear()
circos.par(cell.padding=c(0,0,0,0), gap.degree=.5)
#track.margin=c(.2,.2))
circos.initialize(CompPlot$Complication, xlim = c(0, 1),
sector.width =c(CompPlot$Count[ord]))
circos.trackPlotRegion(ylim = c(0, 1),
factors=CompPlot$Complication,
track.height = .08,
bg.col = colfunc(18),
bg.border = NA,
panel.fun=function(x,y){
i = get.cell.meta.data("sector.numeric.index")
name = get.cell.meta.data("sector.index")
xlim = get.cell.meta.data("xlim")
if (i %in% 8:13) dir="vertical_left"  else dir="vertical_right"
circos.text(x=.5, y=0,
labels=CompPlot$labls[ord][i],
direction=dir,
cex=.6)
}
)
###Plot Links
#Now create the links between the segments
for (k in 1:nrow(links4)) {
if (links4$Count.x[k]>340) {
start=runif(1)
end=runif(1)
circos.link(links4$Comp1[k],
c(start,start+links4$Comp1.perc[k]),
links4$Comp2[k],
c(end,end+links4$Comp2.perc[k]),
top.ratio=.48, top.ratio.low=.50,
col=paste(colfunc(153)[k],"80",sep=''))
}
}
par(mar = c(1, 1, 1, 1))
circos.clear()
circos.par(cell.padding=c(0,0,0,0), gap.degree=.5)
#track.margin=c(.2,.2))
circos.initialize(CompPlot$Complication, xlim = c(0, 1),
sector.width =c(CompPlot$Count[ord]))
circos.trackPlotRegion(ylim = c(0, 1),
factors=CompPlot$Complication,
track.height = .08,
bg.col = colfunc(18),
bg.border = NA,
panel.fun=function(x,y){
i = get.cell.meta.data("sector.numeric.index")
name = get.cell.meta.data("sector.index")
xlim = get.cell.meta.data("xlim")
if (i %in% 8:13) dir="vertical_left"  else dir="vertical_right"
circos.text(x=.5, y=0,
labels=CompPlot$labls[ord][i],
direction=dir,
cex=.6)
}
)
###Plot Links
#Now create the links between the segments
for (k in 1:nrow(links4)) {
if (links4$Count.x[k]>340) {
start=runif(1)
end=runif(1)
circos.link(links4$Comp1[k],
c(start,start+links4$Comp1.perc[k]),
links4$Comp2[k],
c(end,end+links4$Comp2.perc[k]),
top.ratio=.48, top.ratio.low=.50,
col=paste(colfunc(153)[k],"80",sep=''))
}
}
cite(rCharts)
citation(rCharts)
citation(Circlize)
citation(circlize)
library(circlize)
citation(circlize)
citation()
library(rCharts)
citation(rCharts)
citation(plyr)
